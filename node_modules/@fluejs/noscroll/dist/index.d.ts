interface NoScrollOptions {
    noHandleWindowResize?: boolean;
    windowResizeThrottle?: number;
    onScrollDisable?: (target: HTMLElement) => void;
    onScrollEnable?: (target: HTMLElement) => void;
    onInitScrollDisable?: () => void;
    onResetScrollDisable?: () => void;
}

declare const createNoScroll: (options?: NoScrollOptions) => {
    adjustScrollbarWidth: (target: HTMLElement | HTMLElement[]) => void;
    removeScrollbarWidthAdjustment: (target: HTMLElement | HTMLElement[]) => void;
    updateAllScrollbarWidthAdjustment: () => void;
    disableScroll: (target: HTMLElement, { scrollbarWidthAdjustment, }?: {
        scrollbarWidthAdjustment?: boolean | undefined;
    }) => void;
    enableScroll: (target: HTMLElement) => void;
    disablePageScroll: () => void;
    enablePageScroll: () => void;
    pageScrollIsDisabled: () => boolean;
    createPageScrollToggler: () => {
        disablePageScroll(): void;
        enablePageScroll(): void;
        togglePageScroll(): void;
    };
    markScrollable: (target: HTMLElement | HTMLElement[]) => void;
    unmarkScrollable: (target: HTMLElement | HTMLElement[]) => void;
};

declare const NoScrollAttrs: {
    readonly SCROLL_DISABLED: "data-noscroll-target-scroll-disabled";
    readonly SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT: "data-noscroll-target-scroll-scrollbar-width-adjustment";
    readonly SCROLLBAR_WIDTH_ADJUSTMENT: "data-noscroll-target-scrollbar-width-adjustment";
    readonly SCROLLABLE: "data-noscroll-target-scrollable";
    readonly GLOBAL_STYLES: "data-noscroll-global-styles";
};
declare const NoScrollCssVars: {
    readonly TARGET_SCROLLBAR_WIDTH: "--noscroll-target-scrollbar-width";
    readonly TARGET_PADDING_RIGHT: "--noscroll-target-padding-right";
};

declare const adjustScrollbarWidth: (target: HTMLElement | HTMLElement[]) => void;
declare const removeScrollbarWidthAdjustment: (target: HTMLElement | HTMLElement[]) => void;
declare const updateAllScrollbarWidthAdjustment: () => void;
declare const disableScroll: (target: HTMLElement, { scrollbarWidthAdjustment, }?: {
    scrollbarWidthAdjustment?: boolean | undefined;
}) => void;
declare const enableScroll: (target: HTMLElement) => void;
declare const disablePageScroll: () => void;
declare const enablePageScroll: () => void;
declare const pageScrollIsDisabled: () => boolean;
declare const createPageScrollToggler: () => {
    disablePageScroll(): void;
    enablePageScroll(): void;
    togglePageScroll(): void;
};
declare const markScrollable: (target: HTMLElement | HTMLElement[]) => void;
declare const unmarkScrollable: (target: HTMLElement | HTMLElement[]) => void;

export { NoScrollAttrs, NoScrollCssVars, adjustScrollbarWidth, createNoScroll, createPageScrollToggler, disablePageScroll, disableScroll, enablePageScroll, enableScroll, markScrollable, pageScrollIsDisabled, removeScrollbarWidthAdjustment, unmarkScrollable, updateAllScrollbarWidthAdjustment };
