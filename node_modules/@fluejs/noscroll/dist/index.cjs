'use strict';

const constants = require('./shared/noscroll.051b1d91.cjs');

const appendGlobalStyles = () => {
  if (document.querySelector(constants.attrAsSelector(constants.NoScrollAttrs.GLOBAL_STYLES))) {
    return;
  }
  const scrollDisabledSelector = constants.attrAsSelector(constants.NoScrollAttrs.SCROLL_DISABLED);
  const scrollbarWidthAdjustmentSelector = constants.attrAsSelector(constants.NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT);
  const scrollScrollbarWidthAdjustmentSelector = constants.attrAsSelector(constants.NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT);
  const css = `    
    ${scrollDisabledSelector} {
        overflow: hidden !important;
    }
    
    ${scrollDisabledSelector} ${scrollbarWidthAdjustmentSelector},
    ${scrollDisabledSelector}${scrollScrollbarWidthAdjustmentSelector} {
        padding-right: calc(var(${constants.NoScrollCssVars.TARGET_PADDING_RIGHT}) + var(${constants.NoScrollCssVars.TARGET_SCROLLBAR_WIDTH})) !important;
    }
    `;
  const styleEl = document.createElement("style");
  styleEl.setAttribute(constants.NoScrollAttrs.GLOBAL_STYLES, "");
  styleEl.appendChild(document.createTextNode(css));
  document.head.appendChild(styleEl);
};

const createNoScroll = (options) => {
  const adjustScrollbarWidth = (target) => {
    constants.asArray(target).forEach((el) => {
      el.removeAttribute(constants.NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT);
      const computedStyle = window.getComputedStyle(el);
      el.style.setProperty(constants.NoScrollCssVars.TARGET_PADDING_RIGHT, computedStyle.paddingRight);
      el.setAttribute(constants.NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT, "");
    });
  };
  const removeScrollbarWidthAdjustment = (target) => {
    constants.asArray(target).forEach((el) => {
      el.removeAttribute(constants.NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT);
      el.style.removeProperty(constants.NoScrollCssVars.TARGET_PADDING_RIGHT);
    });
  };
  const adjustScrollScrollbarWidth = (target) => {
    constants.asArray(target).forEach((el) => {
      let scrollDisabled = false;
      el.removeAttribute(constants.NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT);
      if (el.getAttribute(constants.NoScrollAttrs.SCROLL_DISABLED) !== null) {
        scrollDisabled = true;
        el.removeAttribute(constants.NoScrollAttrs.SCROLL_DISABLED);
      }
      el.style.setProperty(constants.NoScrollCssVars.TARGET_SCROLLBAR_WIDTH, `${constants.getScrollbarWidth(el)}px`);
      if (scrollDisabled) {
        el.setAttribute(constants.NoScrollAttrs.SCROLL_DISABLED, "");
      }
      const computedStyle = window.getComputedStyle(el);
      el.style.setProperty(constants.NoScrollCssVars.TARGET_PADDING_RIGHT, computedStyle.paddingRight);
      el.setAttribute(constants.NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT, "");
    });
  };
  const removeScrollScrollbarWidthAdjustment = (target) => {
    constants.asArray(target).forEach((el) => {
      el.removeAttribute(constants.NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT);
      el.style.removeProperty(constants.NoScrollCssVars.TARGET_SCROLLBAR_WIDTH);
      el.style.removeProperty(constants.NoScrollCssVars.TARGET_PADDING_RIGHT);
    });
  };
  const updateAllScrollbarWidthAdjustment = () => {
    adjustScrollbarWidth(
      [...document.querySelectorAll(
        constants.attrAsSelector(constants.NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT)
      )]
    );
    adjustScrollScrollbarWidth(
      [...document.querySelectorAll(
        constants.attrAsSelector(constants.NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT)
      )]
    );
  };
  const handleWindowResize = constants.throttle(
    updateAllScrollbarWidthAdjustment,
    options?.windowResizeThrottle ?? constants.DEFAULT_WINDOW_RESIZE_THROTTLE
  );
  const {
    init: initScrollDisable,
    reset: resetScrollDisable
  } = constants.createQueue(
    () => {
      if (!options?.noHandleWindowResize) {
        window.addEventListener("resize", handleWindowResize);
      }
      options?.onInitScrollDisable?.();
    },
    () => {
      if (!options?.noHandleWindowResize) {
        window.removeEventListener("resize", handleWindowResize);
      }
      options?.onResetScrollDisable?.();
    }
  );
  const disableScroll = (target, {
    scrollbarWidthAdjustment = true
  } = {}) => {
    appendGlobalStyles();
    initScrollDisable();
    options?.onScrollDisable?.(target);
    if (scrollbarWidthAdjustment) {
      adjustScrollScrollbarWidth(target);
    }
    target.setAttribute(constants.NoScrollAttrs.SCROLL_DISABLED, "");
  };
  const enableScroll = (target) => {
    if (target.getAttribute(constants.NoScrollAttrs.SCROLL_DISABLED) === null) {
      return;
    }
    resetScrollDisable();
    options?.onScrollEnable?.(target);
    removeScrollScrollbarWidthAdjustment(target);
    target.removeAttribute(constants.NoScrollAttrs.SCROLL_DISABLED);
  };
  const {
    init: disablePageScroll,
    reset: enablePageScroll,
    initIsCalled: pageScrollIsDisabled
  } = constants.createQueue(
    () => disableScroll(document.body),
    () => enableScroll(document.body)
  );
  const createPageScrollToggler = () => {
    let isDisabled = false;
    const toggler = {
      disablePageScroll() {
        if (isDisabled) {
          return;
        }
        disablePageScroll();
        isDisabled = true;
      },
      enablePageScroll() {
        if (!isDisabled) {
          return;
        }
        enablePageScroll();
        isDisabled = false;
      },
      togglePageScroll() {
        if (isDisabled) {
          toggler.enablePageScroll();
        } else {
          toggler.disablePageScroll();
        }
      }
    };
    return toggler;
  };
  const markScrollable = (target) => {
    constants.asArray(target).forEach((el) => {
      el.setAttribute(constants.NoScrollAttrs.SCROLLABLE, "");
    });
  };
  const unmarkScrollable = (target) => {
    constants.asArray(target).forEach((el) => {
      el.removeAttribute(constants.NoScrollAttrs.SCROLLABLE);
    });
  };
  return {
    adjustScrollbarWidth,
    removeScrollbarWidthAdjustment,
    updateAllScrollbarWidthAdjustment,
    disableScroll,
    enableScroll,
    disablePageScroll,
    enablePageScroll,
    pageScrollIsDisabled,
    createPageScrollToggler,
    markScrollable,
    unmarkScrollable
  };
};

const {
  adjustScrollbarWidth,
  removeScrollbarWidthAdjustment,
  updateAllScrollbarWidthAdjustment,
  disableScroll,
  enableScroll,
  disablePageScroll,
  enablePageScroll,
  pageScrollIsDisabled,
  createPageScrollToggler,
  markScrollable,
  unmarkScrollable
} = createNoScroll();

exports.NoScrollAttrs = constants.NoScrollAttrs;
exports.NoScrollCssVars = constants.NoScrollCssVars;
exports.adjustScrollbarWidth = adjustScrollbarWidth;
exports.createNoScroll = createNoScroll;
exports.createPageScrollToggler = createPageScrollToggler;
exports.disablePageScroll = disablePageScroll;
exports.disableScroll = disableScroll;
exports.enablePageScroll = enablePageScroll;
exports.enableScroll = enableScroll;
exports.markScrollable = markScrollable;
exports.pageScrollIsDisabled = pageScrollIsDisabled;
exports.removeScrollbarWidthAdjustment = removeScrollbarWidthAdjustment;
exports.unmarkScrollable = unmarkScrollable;
exports.updateAllScrollbarWidthAdjustment = updateAllScrollbarWidthAdjustment;
