const isBody = (target) => target === document.body;
const attrAsSelector = (attr) => `[${attr}]`;
const getScrollbarWidth = (target) => {
  if (isBody(target)) {
    const documentWidth = document.documentElement.clientWidth;
    const windowWidth = window.innerWidth;
    return windowWidth - documentWidth;
  }
  const borderLeftWidthSavedValue = target.style.borderLeftWidth;
  const borderRightWidthSavedValue = target.style.borderRightWidth;
  target.style.borderLeftWidth = "0px";
  target.style.borderRightWidth = "0px";
  const scrollbarWidth = target.offsetWidth - target.clientWidth;
  target.style.borderLeftWidth = borderLeftWidthSavedValue;
  target.style.borderRightWidth = borderRightWidthSavedValue;
  return scrollbarWidth;
};
const asArray = (data) => {
  if (Array.isArray(data)) {
    return data;
  }
  return [data];
};
function throttle(fn, wait) {
  let inThrottle;
  let lastFn;
  let lastTime;
  return (...args) => {
    if (!inThrottle) {
      fn(...args);
      lastTime = Date.now();
      inThrottle = true;
    } else {
      clearTimeout(lastFn);
      lastFn = setTimeout(() => {
        if (Date.now() - lastTime >= wait) {
          fn(...args);
          lastTime = Date.now();
        }
      }, Math.max(wait - (Date.now() - lastTime), 0));
    }
  };
}
const createQueue = (onInit, onReset, onClear) => {
  let counter = 0;
  let isInitCalled = false;
  const init = () => {
    if (counter <= 0) {
      onInit();
      isInitCalled = true;
    }
    counter += 1;
  };
  const reset = () => {
    if (counter > 0) {
      counter -= 1;
    }
    if (counter <= 0 && isInitCalled) {
      onReset();
    }
  };
  const clearAndReset = () => {
    counter = 0;
    isInitCalled = false;
    onClear?.();
    onReset();
  };
  const initIsCalled = () => isInitCalled;
  return {
    init,
    reset,
    clearAndReset,
    initIsCalled
  };
};

const NoScrollAttrs = {
  SCROLL_DISABLED: "data-noscroll-target-scroll-disabled",
  // scrollbar width adjustment for an element with a disabled scrollbar.
  SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT: "data-noscroll-target-scroll-scrollbar-width-adjustment",
  SCROLLBAR_WIDTH_ADJUSTMENT: "data-noscroll-target-scrollbar-width-adjustment",
  SCROLLABLE: "data-noscroll-target-scrollable",
  GLOBAL_STYLES: "data-noscroll-global-styles"
};
const NoScrollCssVars = {
  TARGET_SCROLLBAR_WIDTH: "--noscroll-target-scrollbar-width",
  TARGET_PADDING_RIGHT: "--noscroll-target-padding-right"
};
const DEFAULT_WINDOW_RESIZE_THROTTLE = 200;

export { DEFAULT_WINDOW_RESIZE_THROTTLE as D, NoScrollAttrs as N, attrAsSelector as a, NoScrollCssVars as b, asArray as c, createQueue as d, getScrollbarWidth as g, throttle as t };
