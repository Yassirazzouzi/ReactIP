import { a as attrAsSelector, N as NoScrollAttrs, b as NoScrollCssVars, t as throttle, D as DEFAULT_WINDOW_RESIZE_THROTTLE, c as asArray, d as createQueue, g as getScrollbarWidth } from './shared/noscroll.96a94b32.mjs';

const appendGlobalStyles = () => {
  if (document.querySelector(attrAsSelector(NoScrollAttrs.GLOBAL_STYLES))) {
    return;
  }
  const scrollDisabledSelector = attrAsSelector(NoScrollAttrs.SCROLL_DISABLED);
  const scrollbarWidthAdjustmentSelector = attrAsSelector(NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT);
  const scrollScrollbarWidthAdjustmentSelector = attrAsSelector(NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT);
  const css = `    
    ${scrollDisabledSelector} {
        overflow: hidden !important;
    }
    
    ${scrollDisabledSelector} ${scrollbarWidthAdjustmentSelector},
    ${scrollDisabledSelector}${scrollScrollbarWidthAdjustmentSelector} {
        padding-right: calc(var(${NoScrollCssVars.TARGET_PADDING_RIGHT}) + var(${NoScrollCssVars.TARGET_SCROLLBAR_WIDTH})) !important;
    }
    `;
  const styleEl = document.createElement("style");
  styleEl.setAttribute(NoScrollAttrs.GLOBAL_STYLES, "");
  styleEl.appendChild(document.createTextNode(css));
  document.head.appendChild(styleEl);
};

const createNoScroll = (options) => {
  const adjustScrollbarWidth = (target) => {
    asArray(target).forEach((el) => {
      el.removeAttribute(NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT);
      const computedStyle = window.getComputedStyle(el);
      el.style.setProperty(NoScrollCssVars.TARGET_PADDING_RIGHT, computedStyle.paddingRight);
      el.setAttribute(NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT, "");
    });
  };
  const removeScrollbarWidthAdjustment = (target) => {
    asArray(target).forEach((el) => {
      el.removeAttribute(NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT);
      el.style.removeProperty(NoScrollCssVars.TARGET_PADDING_RIGHT);
    });
  };
  const adjustScrollScrollbarWidth = (target) => {
    asArray(target).forEach((el) => {
      let scrollDisabled = false;
      el.removeAttribute(NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT);
      if (el.getAttribute(NoScrollAttrs.SCROLL_DISABLED) !== null) {
        scrollDisabled = true;
        el.removeAttribute(NoScrollAttrs.SCROLL_DISABLED);
      }
      el.style.setProperty(NoScrollCssVars.TARGET_SCROLLBAR_WIDTH, `${getScrollbarWidth(el)}px`);
      if (scrollDisabled) {
        el.setAttribute(NoScrollAttrs.SCROLL_DISABLED, "");
      }
      const computedStyle = window.getComputedStyle(el);
      el.style.setProperty(NoScrollCssVars.TARGET_PADDING_RIGHT, computedStyle.paddingRight);
      el.setAttribute(NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT, "");
    });
  };
  const removeScrollScrollbarWidthAdjustment = (target) => {
    asArray(target).forEach((el) => {
      el.removeAttribute(NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT);
      el.style.removeProperty(NoScrollCssVars.TARGET_SCROLLBAR_WIDTH);
      el.style.removeProperty(NoScrollCssVars.TARGET_PADDING_RIGHT);
    });
  };
  const updateAllScrollbarWidthAdjustment = () => {
    adjustScrollbarWidth(
      [...document.querySelectorAll(
        attrAsSelector(NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT)
      )]
    );
    adjustScrollScrollbarWidth(
      [...document.querySelectorAll(
        attrAsSelector(NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT)
      )]
    );
  };
  const handleWindowResize = throttle(
    updateAllScrollbarWidthAdjustment,
    options?.windowResizeThrottle ?? DEFAULT_WINDOW_RESIZE_THROTTLE
  );
  const {
    init: initScrollDisable,
    reset: resetScrollDisable
  } = createQueue(
    () => {
      if (!options?.noHandleWindowResize) {
        window.addEventListener("resize", handleWindowResize);
      }
      options?.onInitScrollDisable?.();
    },
    () => {
      if (!options?.noHandleWindowResize) {
        window.removeEventListener("resize", handleWindowResize);
      }
      options?.onResetScrollDisable?.();
    }
  );
  const disableScroll = (target, {
    scrollbarWidthAdjustment = true
  } = {}) => {
    appendGlobalStyles();
    initScrollDisable();
    options?.onScrollDisable?.(target);
    if (scrollbarWidthAdjustment) {
      adjustScrollScrollbarWidth(target);
    }
    target.setAttribute(NoScrollAttrs.SCROLL_DISABLED, "");
  };
  const enableScroll = (target) => {
    if (target.getAttribute(NoScrollAttrs.SCROLL_DISABLED) === null) {
      return;
    }
    resetScrollDisable();
    options?.onScrollEnable?.(target);
    removeScrollScrollbarWidthAdjustment(target);
    target.removeAttribute(NoScrollAttrs.SCROLL_DISABLED);
  };
  const {
    init: disablePageScroll,
    reset: enablePageScroll,
    initIsCalled: pageScrollIsDisabled
  } = createQueue(
    () => disableScroll(document.body),
    () => enableScroll(document.body)
  );
  const createPageScrollToggler = () => {
    let isDisabled = false;
    const toggler = {
      disablePageScroll() {
        if (isDisabled) {
          return;
        }
        disablePageScroll();
        isDisabled = true;
      },
      enablePageScroll() {
        if (!isDisabled) {
          return;
        }
        enablePageScroll();
        isDisabled = false;
      },
      togglePageScroll() {
        if (isDisabled) {
          toggler.enablePageScroll();
        } else {
          toggler.disablePageScroll();
        }
      }
    };
    return toggler;
  };
  const markScrollable = (target) => {
    asArray(target).forEach((el) => {
      el.setAttribute(NoScrollAttrs.SCROLLABLE, "");
    });
  };
  const unmarkScrollable = (target) => {
    asArray(target).forEach((el) => {
      el.removeAttribute(NoScrollAttrs.SCROLLABLE);
    });
  };
  return {
    adjustScrollbarWidth,
    removeScrollbarWidthAdjustment,
    updateAllScrollbarWidthAdjustment,
    disableScroll,
    enableScroll,
    disablePageScroll,
    enablePageScroll,
    pageScrollIsDisabled,
    createPageScrollToggler,
    markScrollable,
    unmarkScrollable
  };
};

const {
  adjustScrollbarWidth,
  removeScrollbarWidthAdjustment,
  updateAllScrollbarWidthAdjustment,
  disableScroll,
  enableScroll,
  disablePageScroll,
  enablePageScroll,
  pageScrollIsDisabled,
  createPageScrollToggler,
  markScrollable,
  unmarkScrollable
} = createNoScroll();

export { NoScrollAttrs, NoScrollCssVars, adjustScrollbarWidth, createNoScroll, createPageScrollToggler, disablePageScroll, disableScroll, enablePageScroll, enableScroll, markScrollable, pageScrollIsDisabled, removeScrollbarWidthAdjustment, unmarkScrollable, updateAllScrollbarWidthAdjustment };
